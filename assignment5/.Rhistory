ls
ls()
data = read.csv("seaflow <- 21min.csv")
data = read.csv("seaflow_21min.csv")
data
description(data)
describe(data)
summmary(data)
summary(data)
count(data)
count.fields(data)
data[1]
data[1][1]
data[1,1]
data[0,0]
data[1,2]
data[data[12]=='synecho']
data[12]=='synecho'
data[12,data[12]=='synecho']
len(data[data[12]=='synecho'])
(data[data[12]=='synecho'])
length(data[data[12]=='synecho'])
dim(data)
colnames(data)
data[colnames[12]]
length(colnames[12])
length(data))
length(data)
length(data[12])
mean(data[12])
rownames(data)
attributes(data)
length(data[data[12]=='synecho'])
length(data)
a<-c(1,2,3,4,5)
a==4
a[a==4]
a<-c(a,a+2)
a
attributes(a)
nrow(data[data[12]=='synecho'])
nrow(data)
ncol(data)
data[12]
nrow(data[12])
ncol(data[12])
rownames(data[12])
colnames(data[12])
nrow(data[data[12]=='synecho'])
length(data[data[12]=='synecho'])
length(data)
nrow(data)
nrow(data[12])
length(data[12,data[12]=='synecho'])
length(data[12][data[12]=='synecho'])
colnames(data)
attributes(colnames(data))
colnames(data)[2]
colnames(data)[colnames(data)=='time']
ncol(data[2])
nrow(data[2])
mean(nrow(data[2]))
mean(data[2])
?colMeans
colMeans(data)
colMeans(data[2])
data[["time"]]
?scatter.smooth
scatter.smooth(x=data$pe,y=data$chl_small)
scatter.smooth(x=data$pe,y=data$chl_big)
scatter.smooth(x=data$pe,y=data$chl_small)
scatter.smooth
?scatter.smooth
require(graphics)
scatter.smooth(x=data$pe,y=data$chl_small)
?scatter.smooth
?legend
scatter.smooth(x=data$pe[data$pop=='ultra'],y=data$chl_small[data$pop=='ultra'])
data$pe[data$pop=='ultra']
nrow(data$pe[data$pop=='ultra'])
length(data$pe[data$pop=='ultra'])
length(data$chl_small[data$pop=='ultra'])
scatter.smooth(x=data$pe[data$pop=='ultra'],y=data$chl_small[data$pop=='pico'])
scatter.smooth(x=data$pe[data$pop=='pico'],y=data$chl_small[data$pop=='pico'])
scatter.smooth(x=data$pe[data$pop=='ultra'],y=data$chl_small[data$pop=='ultra'])
scatter.smooth(x=data$pe[data$pop=='crypto'],y=data$chl_small[data$pop=='crypto'])
scatter.smooth(x=data$pe[data$pop=='nano'],y=data$chl_small[data$pop=='nano'])
scatter.smooth(x=data$pe[data$pop=='synecho'],y=data$chl_small[data$pop=='synecho'])
scatter.smooth(x=data$pe[data$pop=='ultra'],y=data$chl_small[data$pop=='ultra'])
print(model)
print(data)
?ggplot
ggplot
require(ggplot)
require(ggpplot2)
load(ggpplot2)
load('ggpplot2')
load('ggpplot2')
library()
load(rpart))
?rpart
rpart
require(rpart)
?rpart
?train
?rpart
require (ggplot))
require (ggplot)
require (qqplot)
require (qqplot2)
require(ggplot)
qplot()
data[1,1]
data[1:4,data[,12]=='synecho']
data[data[,12]=='synecho'][1:4]
data[data[,12]=='synecho'][1:4]
data[data[12]=='synecho'][1:4]
data[data[12]=='synecho'][1:40]
data[data[12]=='synecho'][1:40,]
data[1,1]
data[1,]
data[1,2]
data[1:4,]
length(data[1])
length(data[1][])
length(data[1][2])
library(ggplot2)
library 
library()
q()
n
require(caret)
data=read.csv('seaflow_21min.csv')
summary(data)
rownames(data)
int(rownames(data))
parseint(rownames(data))
rownames(data)[1]
createDataPartition(n=length(rownames(data)))
createDataPartition(rownames(data))
createDataPartition(data)
data[,"file_id"]
data[,"pop"]
colnames(data)
data[1,"pop"]
data["1","pop"]
help(data)
help(mtcars)
head(data)
data[["pop"]][1:4]
data[[12]][1:4]
data$12
data$pop
data$file_id
data["pop"]
data[["pop"]]
data[1,]
data[c(1:5),]
data[c(1:5),"pop"]
f=data[,"pop"]
f[1:4]
getwd()
createDataPartition(y=rownames(data))
createDataPartition(y=data(,file_id))
createDataPartition(y=data(,"file_id"))
createDataPartition(y=data$file_id)
?ggplot
a='op'
b=a+'we'
b=a~'we'
b
?~
~
.
?formula
ls
data()
Titanic
colnames(Titanic)
attributes(Titanic)
data(Titanic)
Titanic[1:5]
head(Titanic)
data(quakes)
quakes$depth
summary(quakes$depth)
summary(quakes$mag)
help(Titanic)
apply(Titanic,2,mean)
apply(Titanic,4,mean)
apply(Titanic,3,mean)
apply(Titanic,3,sum)
apply(Titanic,4,sum)
apply(Titanic,2,sum)
apply(Titanic,1,sum)
Titanic[Titanic[1]==3rd]
Titanic[Titanic[1]=='3rd']
Titanic[1]
Titanic[2
]
attributes(Titanic)
Titanic
dnorm(data[1],mean(data[1]),standard
)
?standard
??standard
rnorm(100,3,2)
rpois(100,3)
rt(100,3)
plot(rt(100,1))
plot(rnorm(100,1,2))
plot(rt(100,1,2))
plot(rgamma(100,1,2))
plot(rexp(100,1,2))
plot(rexponential(100,1,2))
plot(rexp(100,1))
plot(data$pe,data$chl_small)
pairs(data)
hist(data$pop)
hist(data$chl_small)
hist(data$chl_big)
hist(data$pe)
hist(data$fsc_small)
hist(data$fsc_big)
hist(data$fsc_perp)
hist(data$fsc_time)
hist(data$time)
hist(data$cell_id)
fix(rnorm)
fix(hist)
library(caret)
training
train <- createDataPartition(data$file_id,p=0.5,list=FALSE)
train
is.data.frame(train)
is.list(train)
is.vector(train)
is.matrix(train)
train[1]
train[,]
train[1,1]
train[1,2]
head(train)
is.vector(train$Resample1)
is.vector(train)
is.matrix(train)
data[train]
data[train,]
data[train,12]
data[train,11]
data[train,1]
data[train,3]
help (ggplot2)
?ggplot
trainingpe=data$pe[train]
trainingpe
trainingchlsmall=data$chl_small[train]
ggplot(trainingpe, trainingchlsmall)
ggplot(data.frame(trainingpe, trainingchlsmall))
ggplot(data)
plot(trainingpe, trainingchlsmall)
qplot(trainingpe, trainingchlsmall,colors=2)
trainingdata = data[train]
nrow(trainingdata)
nrows(trainingdata)
trainingdata
trainingdata = data[train,]
nrows(trainingdata)
nrow(trainingdata)
testdata = data[-train,]
nrow(testdata)
colnames(testdata)
ggplot(pe, chl_small,trainingdata)
qplot(pe, chl_small,data=trainingdata)
qplot(pe, chl_small,data=trainingdata,color=pop)
qplot(pe, chl_small,data=trainingdata,color=pop,size=pop)
qplot(pe, chl_small,data=trainingdata,color=pop,alpha=pop)
is.factor(data$pop)
table(data$pop)
summary(data$fsc_small)
summary(data$time)
fol=formula(Class ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol
model <- rpart(fol, method="class", data=trainingdata)
library(rpart)
model <- rpart(fol, method="class", data=trainingdata)
fol=formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=trainingdata)
fol=formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=trainingdata)
print(model)
predict(newdata=testdata)
predict(model,newdata=testdata)
predict(model,newdata=testdata)$pop
summary(predict(model,newdata=testdata))
table(predict(model,newdata=testdata))
head(predict(model,newdata=testdata))
prediction = predict(model,newdata=testdata)
head(prediction)
head(testdata)
colnames(prediction)
max(prediction)
max(prediction[,])
head(prediction)
min(prediction)
??max
max.col(prediction)
head(max.col(prediction))
head(prediction)
error <- max.col(prediction)==testdata$popp
error
testdata$pop
is.factor(testdata$pop)
unclass(testdata$pop)
error <- max.col(prediction)==unclass(testdata$pop)
error
sum(error)
head error
head(error)
error <- max.col(prediction)!=unclass(testdata$pop)
sum(error)
length(error)
5174/36170
error <- max.col(prediction)==unclass(testdata$pop)
sum(error)/36170
importance(model)
??importance
??importance
varImp(useModel=model)
varImp(object=model)
sort(varImp(object=model))
sort.list(varImp(object=model))
sortImp(varImp(object=model))
sortImp(object=model)
varImp(object=model)
library(randomForest)
model <- randomForest(fol, data=trainingdata)
importance(model)
prediction = predict(model,newdata=testdata)
error <- max.col(prediction)==unclass(testdata$pop)
prediction
typeof(testdata)
testdata
head(testdata)
is.data.frame(testdata)
is.list(testdata)
typeof(prediction)
prediction[1]
prediction[2]
head (prediction)
unclass(prediction)
p=unclass(prediction)
p
p[1:10]
p[72337:]
p[72337]
length(p)
p[,]
p[36170]
p[36169]
p[36168]
p$72337
p["72337"]
max.col(prediction)
prediction
error <- prediction==testdata$pop
error
sum(error)
sum(error)/length(error)
importance(model)
library(e1071)
install.packages(pkgs="e1071")
q()
library(e1071)
model <- svm(fol,data=trainingdata)
prediction = predict(model,newdata=testdata)
head(prediction)
error <- prediction==testdata$pop
error
sum(error)/length(error)
importance(model)
table(pred=prediction, true = testdata$pop)
library(rpart)
model<-rpart(formula=fol,data=trainingdata)
prediction = predict(model,newdata=testdata)
prediction
pred <- max.col(prediction)
pred
error = pred==unclass(testdata$pop)
table(pred, true = unclass(testdata$pop))
head(prediction)
head(class(max.col(prediction)))
class(max.col(prediction))
levels(max.col(prediction))
level(max.col(prediction))
colnames(max.col(prediction))
attributes(max.col(prediction))
?max.col
?which.max
table(pred, true = unclass(testdata$pop))
head(prediction)
library(e1071)
model <- svm(fol,data=trainingdata)
predsvm <- predict(model, newdata=testdata)
levels(data$file_id)
unclass(data$file_id)
table(data$file_id)
table(data$time)
table(data$cell_id)
table(data$d1)
table(data$d2)
table(data$fsc_small)
table(data$fsc_big)
table(data$fsc_perp)
table(data$chl_small)
table(data$chl_big)
table(data$pe)
table(data$pop)
table(data$file_id)
table(data$fsc_ig)
table(data$fsc_big)
table(data$pe)
trainingdata$file_id==208
trainingdata[trainingdata$file_id==208]
trainingdata[,trainingdata$file_id==208]
trainingdata[trainingdata$file_id==208,]
max.col(trainingdata$file_id==208)
trainingdata[trainingdata$file_id != 208]
lst=c(a=23,b=89,c=90)
lst
lst[lst             != 89]
df=data.frame(row.names=c(1,2,3),lst)
df
append(df,c(8,5,6))
df
append(df,data.frame(c(8,5,6)))
lst
which(x=trainingdata$file_id,208)
?which
which(trainingdata$file_id != 208)
newtrainingdata=trainingdata[which(trainingdata$file_id != 208)]
newtrainingdata=trainingdata[which(trainingdata$file_id != 208),]
head(newtrainingdata)
length(newtrainingdata)
nrows(newtrainingdata)
nrow(newtrainingdata)
model <- svm(fol,data=newtrainingdata)
prednewsvm <- predict(model, newdata=testdata)
head(prednewsvm)
error <- prednewsvm==testdata$pop
error <- prednewsvm!=testdata$pop
sum(error)/length(error)
error <- prednewsvm==testdata$pop
sum(error)/length(error)
0.9216478-0.9208184
newtestdata=testdata[which(testdata$file_id != 208),]
prednewsvm <- predict(model, newdata=newtestdata)
error <- prednewsvm==newtestdata$pop
sum(error)/length(error)
0.9216478-0.9702787
?nnet
library(nnet)
?nnet
fol
?nnet
data$file_id[-280]
data[data$file_id[-208],]
head(data[data$file_id[-208],])
head(data)
head(data[data$file_id!=208,])
q()
q()
